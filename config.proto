syntax = "proto3";

package hello.core;
option go_package = "github.com/gzjjjfree/hello;core";

message Config { 
    // 入站处理程序配置。必须至少有一个项目
    repeated InboundHandlerConfig  inbounds  = 1;
  
    // 出站处理程序配置。必须至少有一个项目。第一个项目用作路由的默认值。
    repeated OutboundHandlerConfig outbounds = 2;
  
    DnsHandlerConfig               dns       = 3;

    RoutingHandlerConfig           routing   = 4;
}

// InboundHandlerConfig 是入站处理程序的配置。
message InboundHandlerConfig {
    string tag = 1;
    string protocol = 2;
    int32 port = 3;
    string listen = 4;
    SniffingConfig sniffing = 5;
}

message SniffingConfig {
    bool enabled = 1;
    repeated string destOverride = 2;
}

// OutboundHandlerConfig 是出站处理程序的配置。
message OutboundHandlerConfig {
    string tag      = 1;
    string protocol = 2;
    SettingsConfig settings = 3;
    StreamSettingsConfig streamSettings = 4;
    MuxConfig mux = 5;
}

message DnsHandlerConfig {
    repeated string servers       = 1;
    string queryStrategy = 2;
}

message RoutingHandlerConfig {
    string domainStrategy      = 1;
    repeated RulesConfig rules = 2;
}

message RulesConfig {
    string          type        = 1;
    string          outboundTag = 2;
    repeated string domain      = 3;
    repeated string ip          = 4;
}

message SettingsConfig {
    repeated VnextConfig vnext = 1;
}

message VnextConfig {
    repeated UsersConfig users = 1;
    string address = 2;
    int32 port    = 3;
}

message UsersConfig {
    string id       = 1;
    int32 alterId   = 2;
    string security = 3;
}

message StreamSettingsConfig {
    string network = 1;
    string security = 2;
    TlsSettingsConfig tlsSettings = 3;
    WsSettingsConfig wsSettings = 4;
}

message MuxConfig {
    bool enabled      = 1;
    int32 concurrency = 2;
}

message TlsSettingsConfig {
    string servername = 1;
}

message WsSettingsConfig {
    string path = 1;
    HeadersConfig headers = 2;
}

message HeadersConfig {
    string Host = 1;
}